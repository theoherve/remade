// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  hashedPassword String
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  products      Product[]
  orders        Order[]   @relation("CustomerOrders")
  shopOrders    Order[]   @relation("ShopOrders")
  reviews       Review[]
  shop          Shop?
  collections   Collection[]
  favorites     Favorite[]
}

model Profile {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatar        String?
  bio           String?
  location      String?
  phoneNumber   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Shop {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  description   String?
  banner        String?
  logo          String?
  theme         Json?     // Pour stocker les préférences de personnalisation (couleurs, polices, etc.)
  products      Product[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Product {
  id            String    @id @default(cuid())
  name          String
  description   String
  price         Float
  images        String[]
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String
  shop          Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId        String
  creator       User      @relation(fields: [creatorId], references: [id])
  creatorId     String
  stock         Int       @default(1)
  status        Status    @default(ACTIVE)
  reviews       Review[]
  orderItems    OrderItem[]
  originalBrand String?   // Marque d'origine du vêtement
  materials     String[]  // Matériaux utilisés
  size          String?   // Taille du vêtement
  condition     Condition @default(GOOD) // État du vêtement
  techniques    String[]  // Techniques de remaniement utilisées
  tags          Tag[]     // Tags pour le style et les caractéristiques
  collections   CollectionProduct[]
  favorites     Favorite[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Category {
  id            String    @id @default(cuid())
  name          String    @unique
  description   String?
  products      Product[]
  parent        Category? @relation("SubCategories", fields: [parentId], references: [id])
  parentId      String?
  subCategories Category[] @relation("SubCategories")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Tag {
  id            String    @id @default(cuid())
  name          String    @unique
  description   String?
  products      Product[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Order {
  id            String    @id @default(cuid())
  customer      User      @relation("CustomerOrders", fields: [customerId], references: [id])
  customerId    String
  shop          User      @relation("ShopOrders", fields: [shopId], references: [id])
  shopId        String
  items         OrderItem[]
  status        OrderStatus @default(PENDING)
  total         Float
  shippingAddress String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model OrderItem {
  id            String    @id @default(cuid())
  order         Order     @relation(fields: [orderId], references: [id])
  orderId       String
  product       Product   @relation(fields: [productId], references: [id])
  productId     String
  quantity      Int
  price         Float
}

model Review {
  id            String    @id @default(cuid())
  rating        Int
  comment       String?
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  product       Product   @relation(fields: [productId], references: [id])
  productId     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Collection {
  id            String    @id @default(cuid())
  name          String
  description   String?
  isPublic      Boolean   @default(true)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  products      CollectionProduct[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([userId, name])
}

model CollectionProduct {
  id            String    @id @default(cuid())
  collection    Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId  String
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String
  addedAt       DateTime  @default(now())

  @@unique([collectionId, productId])
}

model Favorite {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String
  createdAt     DateTime  @default(now())

  @@unique([userId, productId])
}

enum Role {
  USER
  CREATOR
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
  SOLD_OUT
  DRAFT
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Condition {
  NEW
  LIKE_NEW
  GOOD
  FAIR
  POOR
} 